generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name                    String?
  email                   String         @unique
  emailVerified           DateTime?
  image                   String?
  cin                     String?        @unique
  password                String
  gender                  String?        @default("Homme")
  date_of_birth           DateTime?
  place_of_birth          String?
  phone_number            String?
  address                 String?
  emergency_contact       String?
  job_title               String?
  hire_date               DateTime?
  salary                  Float?
  grade                   String?
  total_leave_balance     Int?           @default(0)
  remaining_leave_balance Int?           @default(0)
  education               String?
  marital_status          String?        @default("Single")
  dependents_count        Int?           @default(0)
  disability_status       Boolean?       @default(false)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  manager_id              Int?
  id                      Int            @id @default(autoincrement())
  department              String?
  accounts                Account[]
  congeRequestedBy          Conge[] @relation("RequestRelation")
  ApproveDemande          Conge[] @relation("ApprovalRelation")
  Document_archif         Document[]
  sessions                Session[]
  manager                 User?          @relation("ManagerEmployees", fields: [manager_id], references: [id])
  employees               User[]         @relation("ManagerEmployees")
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            Int
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Conge {
  id           String   @id @default(cuid())
  employeeCin  String
  startDate    DateTime
  endDate      DateTime
  leaveType    String
  status       String?   @default("En attente")
  requestedAt  DateTime? @default(now())
  approvedAt   DateTime?
  reason       String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  approvedByCIN String?
  requestedBy  User?     @relation("RequestRelation", fields:[employeeCin], references: [cin])
  approvedBy   User?     @relation("ApprovalRelation", fields: [approvedByCIN], references: [cin])
  
}

model Document {
  id        Int      @id @default(autoincrement())
  titre     String
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
}
