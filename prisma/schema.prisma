generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  cin                     Int            @unique
  name                    String
  password                String
  gender                  String         @default("Homme")
  date_of_birth           DateTime
  place_of_birth          String?
  phone_number            String?
  email                   String         @unique
  address                 String?
  emergency_contact       String?
  job_title               String
  department_id           Int?
  manager_id              Int?
  hire_date               DateTime
  salary                  Float?
  grade                   String?
  total_leave_balance     Int            @default(0)
  remaining_leave_balance Int            @default(0)
  education               String?
  marital_status          String         @default("Single")
  dependents_count        Int            @default(0)
  disability_status       Boolean        @default(false)
  
  conge_requests          Conge[]
  ApproveDemande          DemandeConge[] @relation("ApprovalRelation")
  Employe                 DemandeConge[]
  Document_archif         Document[]
  department              Department?    @relation(fields: [department_id], references: [id])
  manager                 Employee?      @relation("ManagerEmployees", fields: [manager_id], references: [cin])
  employees               Employee[]     @relation("ManagerEmployees")
  sessions  Session[]
}

model Session {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
}

model Conge {
  id             Int          @id @default(autoincrement())
  demandeCongeId Int          @unique
  employeeId     Int
  startDate      DateTime
  endDate        DateTime
  leaveType      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  demandeConge   DemandeConge @relation(fields: [demandeCongeId], references: [id])
  employee       Employee     @relation(fields: [employeeId], references: [cin])
}

model DemandeConge {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startDate    DateTime
  endDate      DateTime
  leaveType    String
  status       String    @default("Pending")
  requestedAt  DateTime  @default(now())
  approvedAt   DateTime?
  approvedById Int?
  reason       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  iddemande    Conge?
  approvedBy   Employee? @relation("ApprovalRelation", fields: [approvedById], references: [cin])
  employee     Employee  @relation(fields: [employeeId], references: [cin])
}

model Document {
  id         Int      @id @default(autoincrement())
  employeeId Int
  titre      String
  url        String
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [cin])
}
