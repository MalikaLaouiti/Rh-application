generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                      Int    @id @default(autoincrement()) 
  name                    String?
  email                   String    @unique
  emailVerified           DateTime?
  image                   String?
  cin                     Int?      @unique
  password                String
  gender                  String?   @default("Homme")
  date_of_birth           DateTime?
  place_of_birth          String?
  phone_number            String?
  address                 String?
  emergency_contact       String?
  job_title               String?
  department_id           Int?
  manager_id              Int?
  hire_date               DateTime?
  salary                  Float?
  grade                   String?
  total_leave_balance     Int?      @default(0)
  remaining_leave_balance Int?      @default(0)
  education               String?
  marital_status          String?   @default("Single")
  dependents_count        Int?      @default(0)
  disability_status       Boolean?  @default(false)

  conge_requests  Conge[]
  ApproveDemande  DemandeConge[] @relation("ApprovalRelation")
  Employe         DemandeConge[]
  Document_archif Document[]
  department      Department?    @relation(fields: [department_id], references: [id])
  manager         User?          @relation("ManagerEmployees", fields: [manager_id], references: [id]) // Fixed relation to use 'id'
  employees       User[]         @relation("ManagerEmployees")

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Department {
  id        Int    @id @default(autoincrement())
  name      String
  employees User[]
}

model Conge {
  id             Int          @id @default(autoincrement())
  employeeId     Int
  startDate      DateTime
  endDate        DateTime
  leaveType      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  demandeConge   DemandeConge @relation(fields: [id], references: [id])

  userId Int
  User   User?   @relation(fields: [userId], references: [id]) // Fixed to reference 'id'
}

model DemandeConge {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  startDate    DateTime
  endDate      DateTime
  leaveType    String
  status       String    @default("Pending")
  requestedAt  DateTime  @default(now())
  approvedAt   DateTime
  approvedById Int
  reason       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  iddemande    Conge?
  approvedBy   User?     @relation("ApprovalRelation", fields: [approvedById], references: [id]) // Fixed to reference 'id'

  userId Int
  User   User?   @relation(fields: [userId], references: [id]) // Fixed to reference 'id'
}

model Document {
  id        Int      @id @default(autoincrement())
  titre     String
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  User      User?    @relation(fields: [userId], references: [id]) // Fixed to reference 'id'
}
